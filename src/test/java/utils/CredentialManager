import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.*;
import java.io.*;
import java.security.SecureRandom;
import java.util.Base64;

public class CredentialManager {
    private static final String AES = "AES";
    private static final String KEY_FILE = "secret.key";
    private static final String CREDS_FILE = "creds.dat";

    public static void main(String[] args) {
        try {
            String password;
            if (credsExist()) {
                password = loadPassword();
            } else {
                password = promptPassword();
                if (password != null && !password.isEmpty()) {
                    int choice = JOptionPane.showConfirmDialog(null, "Remember this password?", "Confirm",
                            JOptionPane.YES_NO_OPTION);
                    if (choice == JOptionPane.YES_OPTION) {
                        savePassword(password);
                    }
                }
            }

            if (password == null) {
                System.out.println("No password provided. Exiting.");
                return;
            }

            // Use the password (e.g., DB connection)
            System.out.println("Retrieved password: " + password);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String promptPassword() {
        JPasswordField pf = new JPasswordField();
        int result = JOptionPane.showConfirmDialog(null, pf, "Enter DB Password",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {
            return new String(pf.getPassword());
        }
        return null;
    }

    private static boolean credsExist() {
        return new File(KEY_FILE).exists() && new File(CREDS_FILE).exists();
    }

    private static void savePassword(String password) throws Exception {
        SecretKeySpec key = getOrCreateKey();
        Cipher cipher = Cipher.getInstance(AES);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encrypted = cipher.doFinal(password.getBytes());

        try (FileWriter writer = new FileWriter(CREDS_FILE)) {
            writer.write(Base64.getEncoder().encodeToString(encrypted));
        }
    }

    private static String loadPassword() throws Exception {
        SecretKeySpec key = loadKey();
        Cipher cipher = Cipher.getInstance(AES);
        cipher.init(Cipher.DECRYPT_MODE, key);

        String encryptedBase64;
        try (BufferedReader reader = new BufferedReader(new FileReader(CREDS_FILE))) {
            encryptedBase64 = reader.readLine();
        }

        byte[] encrypted = Base64.getDecoder().decode(encryptedBase64);
        byte[] decrypted = cipher.doFinal(encrypted);
        return new String(decrypted);
    }

    private static SecretKeySpec getOrCreateKey() throws Exception {
        File keyFile = new File(KEY_FILE);
        if (!keyFile.exists()) {
            KeyGenerator keyGen = KeyGenerator.getInstance(AES);
            keyGen.init(128, new SecureRandom());
            SecretKey secretKey = keyGen.generateKey();
            byte[] keyBytes = secretKey.getEncoded();

            try (FileOutputStream fos = new FileOutputStream(keyFile)) {
                fos.write(Base64.getEncoder().encode(keyBytes));
            }
            return new SecretKeySpec(keyBytes, AES);
        } else {
            return loadKey();
        }
    }

    private static SecretKeySpec loadKey() throws Exception {
        byte[] keyBytes;
        try (FileInputStream fis = new FileInputStream(KEY_FILE)) {
            keyBytes = Base64.getDecoder().decode(fis.readAllBytes());
        }
        return new SecretKeySpec(keyBytes, AES);
    }
}
